<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Bear React Carousel Blog</title>
        <link>https://bear-react-carousel.github.io/blog</link>
        <description>Bear React Carousel Blog</description>
        <lastBuildDate>Wed, 07 Jun 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Swiper carousel design and how loop]]></title>
            <link>https://bear-react-carousel.github.io/blog/Swiper carousel loop</link>
            <guid>https://bear-react-carousel.github.io/blog/Swiper carousel loop</guid>
            <pubDate>Wed, 07 Jun 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Research carousel mechanism]]></description>
            <content:encoded><![CDATA[<p>Research carousel mechanism</p><p><img loading="lazy" src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*hUGGgfksWrUCK5VEVeUcfw@2x.png" alt="swiper banner" class="img_ev3q"></p><p>Today, while researching whether a dynamic Swiper carousel would affect dynamic text in Loop mode, I noticed that the approach in the latest version of Swiper is somewhat different.</p><p>I’ve been directly observing the elements as they move.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="normal-state">Normal State<a href="#normal-state" class="hash-link" aria-label="Direct link to Normal State" title="Direct link to Normal State">​</a></h2><p><img loading="lazy" src="https://miro.medium.com/v2/resize:fit:2400/1*7qXF3NzsA0FnSKqU8k4sfQ.gif" alt="Normal State" class="img_ev3q"></p><p>You can see that under normal circumstances, the method is similar to the general approach of implementing a carousel.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="need-loop-state">Need Loop State<a href="#need-loop-state" class="hash-link" aria-label="Direct link to Need Loop State" title="Direct link to Need Loop State">​</a></h2><p><img loading="lazy" src="https://miro.medium.com/v2/resize:fit:2400/1*eHaFFqud-Mb3GVHVqEJLTw.gif" alt="Need Loop State" class="img_ev3q"></p><p>We can see from the information in ‘aria-label’ that the active item is moved to the first position, then the sequence continues. For every move, we only need to activate the transition-duration animation. After the movement is completed, the animation is deactivated, and movement control should be locked until the completion of the movement.</p><p>actually not</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">// active 5 (is last)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">1 / 5 (-1496 * 0)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">2 / 5 (-1496 * 1)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">3 / 5 (-1496 * 2)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">4 / 5 (-1496 * 3)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">5 / 5 (-1496 * 4)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">// click next, active 1 </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">// then duration    0ms, transform: -4488px,</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">// then duration: 900ms, transform: -5984px, </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">// move</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">2 / 5 (0)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">3 / 5 (-1496px)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">4 / 5 (-2992px)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">5 / 5 (-4488px)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">1 / 5 (-5984px)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">// then duration 0ms</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">// click next, active 2</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">// then duration    0ms, transform: -4488px,</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">// then duration: 900ms, transform: -5984px,</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">3 / 5 (0)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">4 / 5 (-1496px)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">5 / 5 (-2992px)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">1 / 5 (-4488px)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">2 / 5 (-5984px)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">// then duration 0ms</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The speed is too fast to see the flaws</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">containerEl</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">style</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">transform </span><span class="token operator">=</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string string" style="color:rgb(255, 121, 198)">translate3d(</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation operator">-</span><span class="token template-string interpolation number">1904</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string string" style="color:rgb(255, 121, 198)">px, 0px, 0px)</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">containerEl</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">style</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">transitionDuration </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'0ms'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">setTimeout</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    containerEl</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">style</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">transform </span><span class="token operator">=</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string string" style="color:rgb(255, 121, 198)">translate3d(</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation operator">-</span><span class="token template-string interpolation number">3808</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string string" style="color:rgb(255, 121, 198)">px, 0px, 0px)</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    containerEl</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">style</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">transitionDuration </span><span class="token operator">=</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token template-string interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string interpolation">_configurator</span><span class="token template-string interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string interpolation">setting</span><span class="token template-string interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token template-string interpolation">moveTime</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string string" style="color:rgb(255, 121, 198)">ms</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>So make up to move the next target sequence to the last one, then jump to the previous position, and then move to the last one</p><p>The sorting has changed, so it becomes the judgment whether it is the last or the first, and it is judged by order</p><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-problem-can-be-solved">What problem can be solved<a href="#what-problem-can-be-solved" class="hash-link" aria-label="Direct link to What problem can be solved" title="Direct link to What problem can be solved">​</a></h2><p>I originally thought that to loop, one must copy and then instantly replace and reset. By doing so, we can avoid issues related to additional copying and the fact that objects are not identical. Each time, a new object needs to be created.</p><p>Because changing the array order requires re-Render</p><p>It is worth thinking that if the order of the array is actually changed, you can consider whether to use css order to achieve the same effect</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-problems-will-you-encounter">What problems will you encounter<a href="#what-problems-will-you-encounter" class="hash-link" aria-label="Direct link to What problems will you encounter" title="Direct link to What problems will you encounter">​</a></h2><p><img loading="lazy" src="https://miro.medium.com/v2/resize:fit:2400/1*djAzNr7EbSSCExVz82fd2g.gif" alt="Loop mode, total item 5, slidePreView 3" class="img_ev3q"></p><ul><li><p>When the number of Swiper’s Loop is not divisible, it seems that the mobile computing has not been handled well.</p></li><li><p>When sliding manually, or when the number is insufficient, or moving from the first page to the last page, there will be some challenges</p></li></ul><p>As of now, the use of Clone might still be more advantageous than disadvantageous.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ref">Ref<a href="#ref" class="hash-link" aria-label="Direct link to Ref" title="Direct link to Ref">​</a></h2><p><a href="https://github.com/imagine10255/bear-react-carousel/tree/test/230610/loop-no-copy-slide/imagine10255" target="_blank" rel="noopener noreferrer">Check Not Clone Branch</a></p><p><a href="https://medium.com/@imaginechiu/swiper-carousel-design-and-how-loop-88159a88f4ae" target="_blank" rel="noopener noreferrer">Swiper carousel design and how loop</a></p>]]></content:encoded>
            <category>swiper</category>
        </item>
    </channel>
</rss>